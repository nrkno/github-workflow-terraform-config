on:
  workflow_call:
    inputs:
      terraform-job-enabled:
        description: Enable the Terraform checks
        type: boolean
        default: true
      terraform-version:
        description: Version of Terraform to use
        type: string
        default: latest
      working-directory:
        description: Working directory for all workflow operations, unless documented otherwise.
        type: string
        default: .
      terraform-ignore-files:
        description: Comma-separated list of filepaths to remove before running Terraform operations. This is relative to the working-directory argument.
        type: string
        default: ""
      status-comment-enabled:
        description: Post a status comment in the pull request issue after checks have completed.
        type: boolean
        default: true
      status-comment-message:
        description: A custom message to append to the status comment.
        type: string
        default: ""
      runs-on:
        description: Defines the type of machine to run the jobs on.
        type: string
        default: nrk-azure-intern
      trivy-job-enabled:
        description: Scan repository for IaC vulnerabilities using Trivy.
        type: boolean
        default: true
      trivy-ignore-unfixed:
        description: Ignore vulnerabilities that do not have a known fix.
        type: boolean
        default: true
      trivy-sbom-enabled:
        description: Generate a Software Bill of Materials (SBOM) report.
        type: boolean
        default: false
      trivy-severity:
        description: Comma-separated list of severity levels that should trigger errors.
        type: string
        default: MEDIUM,HIGH,CRITICAL
      trivy-ignore-files:
        description: Comma-separated list of paths to .trivyignore files. Paths are relative to the working-directory argument.
        type: string
        default: ""
      trivy-error-is-success:
        description: "Internal: Return successfully only if Trivy finds vulnerabilities."
        type: boolean
        default: false
      terraform-docs-job-enabled:
        description: Automatically update Terraform documentation. https://github.com/terraform-docs/gh-actions#configuration
        type: boolean
        default: true
      terraform-docs-config-file:
        description: Path to a Terraform docs configuration file.
        type: string
        default: .terraform-docs.yaml
      terraform-docs-output-file:
        description: Path to the file to update the documentation in.
        type: string
        default: README.md
      terraform-docs-output-method:
        description: Method to use for injecting the documentation.
        type: string
        default: inject
      terraform-docs-git-commit-message:
        description: Message for the documentation commit.
        type: string
        default: "docs: terraform-docs automated update"
      terraform-docs-git-push:
        description: Automatically push the commit to the pull request branch.
        type: boolean
        default: true
      terraform-docs-fail-on-diff:
        description: "Internal: Fail if there are changes in the documentation."
        type: boolean
        default: true
      terraform-docs-recursive:
        description: Generate documentation recursively for all modules in the working directory.
        type: boolean
        default: false
      workflow-ref:
        description: "Internal: Specify the Git ref to use when the workflow is checking out its own repository. Pass an empty string for auto-detection."
        type: string
        default: ""
    secrets:
      registries:
        required: false

name: Terraform
jobs:
  terraform:
    name: Config Validation in ${{ inputs.working-directory }}
    runs-on: ${{ inputs.runs-on }}
    if: inputs.terraform-job-enabled
    steps:
      - name: Configure secrets
        shell: bash
        env:
          REGISTRIES: "${{ secrets.registries }}"
        run: |
          export IFS=';'
          for registry in $REGISTRIES
          do
            echo $registry
            IFS="=" read domain token <<<$registry
            tokenvar="TF_TOKEN_$(tr . _ <<<$domain | sed s/-/__/g)"
            echo "Setting ${tokenvar} for ${domain}"
            echo "::add-mask::${token}"
            echo "${tokenvar}=${token}" >> "${GITHUB_ENV}"
          done

      - name: Get terraform checkout credentials
        id: credentials
        shell: bash
        run: |
          set -e

          GITHUB_TOKEN=$(curl -sSL --fail -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r ".value")
          token=$(curl -sS --fail -H "Authorization: Bearer $GITHUB_TOKEN" https://terraform-consumer.plattform-public.eno.k8s.az.nrk.cloud/v1/github/workflow_terraform_token)
          terraform_token=$(jq -r .token <<<$token)
          echo "terraform_token=$terraform_token" >> "$GITHUB_OUTPUT"

      - uses: actions/checkout@v4.2.2

      - uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: ${{ inputs.terraform-version }}
          terraform_wrapper: false

      # Delete ignored files inside repo before running Terraform.
      # It should not be possible to delete files outside of the repository root.
      - name: Remove ignored files
        if: inputs.ignore-files != ''
        env:
          IGNORE_FILES: ${{ inputs.terraform-ignore-files }}
        shell: python
        working-directory: ${{ inputs.working-directory }}
        run: |
          import os
          import pathlib
          import shutil

          fpaths = os.getenv("IGNORE_FILES", "")
          for fpath in [s.strip() for s in fpaths.split(",") if s]:
            # Make sure we only delete files in repo root
            safe_dir = os.getcwd() + os.sep
            if not os.path.commonprefix((os.path.realpath(fpath),safe_dir)) == safe_dir:
              raise ValueError(f"Not allowed to delete path outside of repo root: {fpath}")

            # Delete path
            p = pathlib.Path(fpath)
            if p.is_file():
              p.unlink()
              print("deleted file:", p.name)
            elif p.is_dir():
              shutil.rmtree(p.name)
              print("deleted directory:", p.name)

      - name: terraform version
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: |
          set +e
          terraform version

      - name: terraform fmt
        id: fmt
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: |
          set +e
          terraform fmt -check -recursive -list=true
          echo "exit_code=${?}" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Load git credentials
        id: credentials_setup
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        env:
          TOKEN: ${{ steps.credentials.outputs.terraform_token }}
        run: |
          set +e

          credentials_dir=$(mktemp -d)
          echo "git_credentials_dir=${credentials_dir}" >> "${GITHUB_OUTPUT}"
          if [ -f ~/.gitconfig ]
          then
            cp ~/.gitconfig "${credentials_dir}/"
          fi
          echo "https://x-access-token:${TOKEN}@github.com" > "${credentials_dir}/credentials"
          git config --global credential.helper "store --file=${credentials_dir}/credentials"
          git config --global --replace-all 'url.https://github.com/.insteadOf' 'ssh://git@github.com/'
          git config --global --add 'url.https://github.com/.insteadOf' 'git@github.com:'
          cat ~/.gitconfig

      - name: Set terraform cache id
        id: cache_id
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: |
          set +e

          if [ -f .terraform.lock.hcl ]
          then
            echo "terraform_cache_id=$(sha256sum .terraform.lock.hcl | cut -d ' ' -f1)" >> "${GITHUB_OUTPUT}"
          else
            echo "terraform_cache_id=${GITHUB_SHA}" >> "${GITHUB_OUTPUT}"
          fi

      - name: cache terraform modules and providers
        uses: actions/cache@v4.1.2
        with:
          path: |
            ${{ inputs.working-directory }}/.terraform/modules/
            ${{ inputs.working-directory }}/.terraform/providers/
          key: ${{ runner.os }}-${{ steps.cache_id.outputs.terraform_cache_id }}

      - name: terraform init
        id: init
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: |
          set +e
          terraform init -no-color -backend=false
          echo "exit_code=${?}" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Cleanup git credentials
        id: credentials_cleanup
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        env:
          GIT_CREDENTIALS_DIR: ${{ steps.credentials_setup.outputs.git_credentials_dir }}
        run: |
          set +e

          if [ -f "${GIT_CREDENTIALS_DIR}/.gitconfig" ]
          then
            cp "${GIT_CREDENTIALS_DIR}/.gitconfig" ~/.gitconfig
          else
            rm ~/.gitconfig
          fi
          shred -u "${GIT_CREDENTIALS_DIR}/credentials"
          rm -r -- "${GIT_CREDENTIALS_DIR}"

        # workaround for https://github.com/hashicorp/terraform/issues/28490
      - uses: actions/setup-go@v5.1.0
        with:
          go-version: "1.16.15"

      - uses: bendrucker/terraform-configuration-aliases-action@v1.3.0
        with:
          path: ${{ inputs.working-directory }}

      - name: "Run: terraform validate"
        id: validate
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: |
          set +e
          terraform validate -no-color
          echo "exit_code=${?}" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Set check status
        id: status
        run: |
          if [[ ${{ steps.fmt.outputs.exit_code }}  == '0' ]]; then fmt='✔️'; else fmt='❌'; fi
          if [[ ${{ steps.init.outputs.exit_code }}  == '0' ]]; then init='✔️'; else init='❌'; fi
          if [[ ${{ steps.validate.outputs.exit_code }}  == '0' ]]; then validate='✔️'; else validate='❌'; fi

          echo "fmt=${fmt}" >> $GITHUB_OUTPUT
          echo "init=${init}" >> $GITHUB_OUTPUT
          echo "validate=${validate}" >> $GITHUB_OUTPUT

      - name: Post/update results as comment
        uses: edumserrano/find-create-or-update-comment@v3.0.0
        # This step will fail when running on the main branch, as there
        # won't be any PR or comment to find.
        continue-on-error: true
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: "<!-- terraform-test-results -->"
          comment-author: "github-actions[bot]"
          body: |
            <!-- terraform-test-results -->
            Format: ${{ steps.status.outputs.fmt }} Init: ${{ steps.status.outputs.init }} Validate: ${{ steps.status.outputs.validate }}

            [check](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ${{ inputs.status-comment-message }}
          edit-mode: replace

      - name: Determine job exit status
        shell: python
        run: |
          import sys

          test_cases = dict(
            fmt="${{ steps.fmt.outputs.exit_code }}",
            init="${{ steps.init.outputs.exit_code }}",
            validate="${{ steps.validate.outputs.exit_code }}",
          )

          failed = False
          for name, exit_code in test_cases.items():
            success = exit_code == "0"
            print(name, success)
            if not success:
              failed = True

          if failed:
            sys.exit(1)

  trivy:
    name: Trivy Vulnerability Scan in ${{ inputs.working-directory }}
    runs-on: ${{ inputs.runs-on }}
    if: inputs.trivy-job-enabled
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Configure Python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: 3.11

      - name: Parse ignore files
        shell: python
        env:
          WORKING_DIRECTORY: ${{ inputs.working-directory }}
          IGNORE_FILES: ${{ inputs.trivy-ignore-files }}
        run: |
          import os

          gh_env_file = os.getenv("GITHUB_ENV")
          workdir = os.getenv("WORKING_DIRECTORY")
          ignorefiles = os.getenv("IGNORE_FILES")

          paths = []
          for p in [p.strip() for p in ignorefiles.split(",") if p]:
            paths.append(os.path.join(workdir, p))

          if paths:
            with open(gh_env_file, 'a') as f:
              print("TRIVYIGNORE_PATHS", ",".join(paths), sep="=", file=f)

      - name: Scan IaC code
        uses: aquasecurity/trivy-action@0.24.0
        id: trivy-scan
        with:
          exit-code: "0"
          format: json
          hide-progress: false
          ignore-unfixed: ${{ inputs.trivy-ignore-unfixed }}
          output: .trivy-scan-result.json
          scan-ref: ${{ inputs.working-directory }}
          scan-type: config
          severity: ${{ inputs.trivy-severity }}
          trivyignores: ${{ env.TRIVYIGNORE_PATHS }}

      - name: Parse scan results
        shell: python
        env:
          REPORT_FILENAME: .trivy-scan-result.json
        continue-on-error: ${{ inputs.trivy-error-is-success }}
        run: |
          import json
          import os
          import sys


          def format_item(*, filename, error):
              """
              Returns a string representing the error, formatted in such a way that
              GitHub will annotate the workflow run based on the severity of the error.
              """
              id = error.get("ID", "-1")
              title = error.get("Title", "<no title>")
              description = error.get("Description", "<no description>")
              message = error.get("Message", "")
              severity = error.get("Severity", "?")
              resolution = error.get("Resolution", "<no resolution>")
              start_line = error.get("CauseMetadata", {}).get("StartLine", "-1")
              end_line = error.get("CauseMetadata", {}).get("EndLine", "-1")

              message = f"{id}: {title}%0A{description}%0A{message}%0AResolution: {resolution}%0A"
              for reference in error.get("References", []):
                  message += f"%0A{reference}"

              gh_severity = "warning"
              if severity.upper() in ("HIGH", "CRITICAL"):
                  gh_severity = "error"

              return f"::{gh_severity} file={filename},line={start_line},endLine={end_line}::{message}"


          with open(os.environ["REPORT_FILENAME"], "r") as f:
              report = json.load(f)
          print("Raw report:", json.dumps(report, indent=2))

          exit_status = 0
          for res in report.get("Results", []):
              filename = res.get("Target", "<no filename>")
              for err in res.get("Misconfigurations", []):
                  print(format_item(filename=filename, error=err))

                  # Since severity filter is set at job level, we can exit non-zero for all
                  # errors regardless of severity and let workflow consumers decide which
                  # severity levels to care about.
                  exit_status = 1

          sys.exit(exit_status)

  trivy-sbom:
    name: Generate SBOM in ${{ inputs.working-directory }}
    runs-on: ${{ inputs.runs-on }}
    if: inputs.trivy-sbom-enabled
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Submit SBOM results to Dependency Snapshots
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: "fs"
          format: "github"
          output: "dependency-results.sbom.json"
          image-ref: "."
          github-pat: "${{ secrets.GITHUB_TOKEN }}"

  terraform-docs:
    name: Render terraform docs in ${{ inputs.working-directory }}
    runs-on: ${{ inputs.runs-on }}
    if: inputs.terraform-docs-job-enabled && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main'
    needs: [terraform]
    concurrency: terraform-docs
    steps:
      - name: Get terraform docs credentials
        id: credentials
        shell: bash
        run: |
          set -e

          GITHUB_TOKEN=$(curl -sSL --fail -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r ".value")
          token=$(curl -sS --fail -H "Authorization: Bearer $GITHUB_TOKEN" https://terraform-consumer.plattform-public.eno.k8s.az.nrk.cloud/v1/github/workflow_terraform_docs_token)
          terraform_docs_token=$(jq -r .token <<<$token)
          echo "terraform_docs_token=$terraform_docs_token" >> "$GITHUB_OUTPUT"
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          ref: "${{ github.head_ref }}"
          token: ${{ steps.credentials.outputs.terraform_docs_token }}
      - uses: actions/setup-python@v5.2.0
      - name: Get workflow ref
        id: workflow_tag
        shell: bash
        run: |
          # Skip auto-detection if input is specified
          if [[ -n "${{ inputs.workflow-ref }}" ]]
          then
            echo "workflow_tag=${{ inputs.workflow-ref }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          pip3 install yq
          workflow_file="${GITHUB_WORKFLOW}"
          if ! [ -f "${workflow_file}" ]
          then
            workflow_file="$(grep -l "^name: ${GITHUB_WORKFLOW}$" .github/workflows/*)"
          fi
          workflow_tag="$(~/.local/bin/yq -r ".jobs[].uses" < "${workflow_file}"| grep github-workflow-terraform-config | cut -d@ -f2 | head -1)"
          echo "workflow_tag=${workflow_tag}" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
      - name: Checkout workflow
        id: checkout_workflow
        uses: actions/checkout@v4.2.2
        with:
          repository: nrkno/github-workflow-terraform-config
          ref: ${{ steps.workflow_tag.outputs.workflow_tag }}
          path: .github-workflow-terraform-config
      - name: Set configuration
        id: set_config
        shell: bash
        env:
          CONFIG_FILE: ${{ inputs.terraform-docs-config-file }}
        run: |
          if [ -f "$CONFIG_FILE" ]
          then
            echo "Using callers configuration for commitlint"
          else
            echo "Using workflow configuration for commitlint"
            cp -- "${GITHUB_WORKSPACE}/.github-workflow-terraform-config/.terraform-docs.yaml" "$CONFIG_FILE"
          fi
      - name: Remove workflow checkout
        shell: bash
        run: |
          rm -rf -- .github-workflow-terraform-config
      - name: Render terraform docs and push
        uses: terraform-docs/gh-actions@v1.3.0
        with:
          working-dir: ${{ inputs.working-directory }}
          config-file: ${{ inputs.terraform-docs-config-file }}
          fail-on-diff: ${{ inputs.terraform-docs-fail-on-diff }}
          recursive: ${{ inputs.terraform-docs-recursive }}
          output-file: ${{ inputs.terraform-docs-output-file }}
          output-method: ${{ inputs.terraform-docs-output-method }}
          git-push: false

      - name: Check for changes
        id: check_for_changes
        if: ${{ inputs.terraform-docs-git-push }}
        shell: bash
        run: |
          if git status --porcelain |grep -E 'A[[:space:]]+.terraform-docs.ya?ml'
          then
            git restore --stage .terraform-docs.*
          fi
          if [ $(git status --porcelain | grep -c -E '*.\.md$') -eq 0 ]
          then
            echo "No changes to .md files"
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          fi

      - uses: planetscale/ghcommit-action@v0.2.0
        if: steps.check_for_changes.outputs.changes_detected == 'true'
        with:
          commit_message: ${{ inputs.terraform-docs-git-commit-message }}
          repo: ${{ github.repository }}
          branch: ${{ github.head_ref || github.ref_name }}
          empty: true
        env:
          GITHUB_TOKEN: ${{ steps.credentials.outputs.terraform_docs_token }}
