on:
  workflow_call:
    inputs:
      terraform-job-enabled:
        description: Enable the Terraform checks
        type: boolean
        default: true
      terraform-version:
        description: Version of Terraform to use
        type: string
        default: latest
      working-directory:
        description: Working directory for all workflow operations, unless documented otherwise.
        type: string
        default: .
      ignore-files:
        description: Comma-separated list of filepaths to delete before running Terraform. This is relative to the working-directory argument.
        type: string
        default: ""
      status-comment-enabled:
        description: Post a status comment in the pull request issue after checks have completed.
        type: boolean
        default: true
      status-comment-message:
        description: A custom message to append to the status comment.
        type: string
        default: ""
      runs-on:
        description: Defines the type of machine to run the jobs on.
        type: string
        default: nrk-azure-intern
      trivy-job-enabled:
        description:  Scan repository for IaC vulnerabilities using Trivy.
        type: boolean
        default: true
      trivy-ignore-unfixed:
        description:  Ignore vulnerabilities that do not have a known fix.
        type: boolean
        default: true
      trivy-sbom-enabled:
        description:  Generate a Software Bill of Materials (SBOM) report.
        type: boolean
        default: false
      trivy-severity:
        description: Comma-separated list of severity levels that should trigger errors.
        type: string
        default: MEDIUM,HIGH,CRITICAL
      trivy-ignore-files:
        description:  Comma-separated list of paths to .trivyignore files. Paths are relative to the working-directory argument.
        type: string
        default: ""
      trivy-error-is-success:
        description: "Internal: Return successfully only if Trivy finds vulnerabilities."
        type: boolean
        default: false
      terraform-docs-job-enabled:
        description: Automatically update Terraform documentation. https://github.com/terraform-docs/gh-actions#configuration
        type: boolean
        default: true
      terraform-docs-config-file:
        description: Path to a Terraform docs configuration file.
        type: string
        default: .terraform-docs.yaml
      terraform-docs-output-file:
        description: Path to the file to update the documentation in.
        type: string
        default: README.md
      terraform-docs-output-method:
        description: Method to use for injecting the documentation.
        type: string
        default: inject
      terraform-docs-git-commit-message:
        description: Message for the documentation commit.
        type: string
        default: "docs: terraform-docs automated update"
      terraform-docs-git-push:
        description: Automatically push the commit to the pull request branch.
        type: boolean
        default: true
      terraform-docs-fail-on-diff:
        description: "Internal: Fail if there are changes in the documentation."
        type: boolean
        default: true
      terraform-docs-recursive:
        description: Generate documentation recursively for all modules in the working directory.
        type: boolean
        default: false
      workflow-ref:
        description: "Internal: Specify the Git ref to use when the workflow is checking out its own repository. Pass an empty string for auto-detection."
        type: string
        default: ""
      # Toggles used for setting environment variables in this workflow.
      # It is not possible to pass env vars directly to reusable workflows.
      enable-azurerm-3-beta-resources:
        description: "Set the environment variable `ARM_THREEPOINTZERO_BETA_RESOURCES=true` when running the Terraform CLI."
        type: boolean
        default: false
    secrets:
      registries:
        required: false
      ssh-private-key:
        required: true
      ssh-private-key-docs-push:
        required: false
      token:
        required: true

name: Terraform
jobs:
  terraform:
    name: Config Validation in ${{ inputs.working-directory }}
    runs-on: ${{ inputs.runs-on }}
    if: inputs.terraform-job-enabled
    steps:
      # Work-around for not being able to test if a secret has been set when
      # using `if` for conditional step execution.
      - name: Determine need for SSH agent
        id: ssh-agent-test
        shell: bash
        env:
          SSH_PRIVATE_KEY: ${{ secrets.ssh-private-key }}
        run: |
          set +e
          test -n "${SSH_PRIVATE_KEY}"
          echo "exit_code=${?}" >> $GITHUB_OUTPUT

      # SSH agent used to checkout Terraform modules from other private repos on Github.
      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.7.0
        if: steps.ssh-agent-test.outputs.exit_code == '0'
        with:
          ssh-private-key: ${{ secrets.ssh-private-key }}

      - name: Configure secrets
        shell: bash
        env:
          REGISTRIES: "${{ secrets.registries }}"
        run: |
          export IFS=';'
          for registry in $REGISTRIES
          do
            echo $registry
            IFS="=" read domain token <<<$registry
            tokenvar="TF_TOKEN_$(tr . _ <<<$domain | sed s/-/__/g)"
            echo "Setting ${tokenvar} for ${domain}"
            echo "${tokenvar}=${token}" >> "${GITHUB_ENV}"
          done

      - name: Configure environment
        run: |
          set +ex
          if [ '${{ inputs.enable-azurerm-3-beta-resources }}' = 'true' ]; then
            echo 'ARM_THREEPOINTZERO_BETA_RESOURCES=true' >> $GITHUB_ENV
          fi

      - name: Checkout
        uses: actions/checkout@v3

      # Delete ignored files inside repo before running Terraform.
      # It should not be possible to delete files outside of the repository root.
      - name: Remove ignored files
        if: inputs.ignore-files != ''
        env:
          IGNORE_FILES: ${{ inputs.ignore-files }}
        shell: python
        working-directory: ${{ inputs.working-directory }}
        run: |
          import os
          import pathlib
          import shutil

          fpaths = os.getenv("IGNORE_FILES", "")
          for fpath in [s.strip() for s in fpaths.split(",") if s]:
            # Make sure we only delete files in repo root
            safe_dir = os.getcwd() + os.sep
            if not os.path.commonprefix((os.path.realpath(fpath),safe_dir)) == safe_dir:
              raise ValueError(f"Not allowed to delete path outside of repo root: {fpath}")

            # Delete path
            p = pathlib.Path(fpath)
            if p.is_file():
              p.unlink()
              print("deleted file:", p.name)
            elif p.is_dir():
              shutil.rmtree(p.name)
              print("deleted directory:", p.name)

      - name: Configure Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform-version }}
          terraform_wrapper: false

      - name: 'Run: terraform version'
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: |
          set +e
          terraform version

      - name: 'Run: terraform fmt'
        id: fmt
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: |
          set +e
          terraform fmt -check -recursive -list=true
          echo "exit_code=${?}" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: 'Run: terraform init'
        id: init
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: |
          set +e
          terraform init -no-color -backend=false
          echo "exit_code=${?}" >> $GITHUB_OUTPUT
        continue-on-error: true

        # workaround for https://github.com/hashicorp/terraform/issues/28490
      - uses: actions/setup-go@v3
        with:
          go-version: '1.16.15'
      - name: 'Run terraform configuration aliases'
        uses: bendrucker/terraform-configuration-aliases-action@v1.3.0
        with:
          path: ${{ inputs.working-directory }}

      - name: 'Run: terraform validate'
        id: validate
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: |
          set +e
          terraform validate -no-color
          echo "exit_code=${?}" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Post results as comment
        uses: actions/github-script@v6
        if: github.event.pull_request && github.actor != 'dependabot[bot]' && inputs.status-comment-enabled
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const bool_emoji = (v) => Boolean(v) ? '✔️' : '❌';
            const data = {
              url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              fmt: bool_emoji(${{ steps.fmt.outputs.exit_code == '0' }}),
              init: bool_emoji(${{ steps.init.outputs.exit_code == '0' }}),
              validate: bool_emoji(${{ steps.validate.outputs.exit_code == '0' }}),
              status: Boolean(${{ steps.fmt.outputs.exit_code == '0' && steps.init.outputs.exit_code == '0' && steps.validate.outputs.exit_code == '0' }})
            }
            const body = `format: ${data.fmt} | init: ${data.init} | validate: ${data.validate}\n[check](${data.url}) ${data.status ? 'succeeded' : 'failed'}:\n\n${{ inputs.status-comment-message }}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body,
            });

      - name: 'Determine job exit status'
        shell: python
        run: |
          import sys

          test_cases = dict(
            fmt="${{ steps.fmt.outputs.exit_code }}",
            init="${{ steps.init.outputs.exit_code }}",
            validate="${{ steps.validate.outputs.exit_code }}",
          )

          failed = False
          for name, exit_code in test_cases.items():
            success = exit_code == "0"
            print(name, success)
            if not success:
              failed = True

          if failed:
            sys.exit(1)

  trivy:
    name: Trivy Vulnerability Scan in ${{ inputs.working-directory }}
    runs-on: ${{ inputs.runs-on }}
    if: inputs.trivy-job-enabled
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Parse ignore files
        shell: python
        env:
          WORKING_DIRECTORY: ${{ inputs.working-directory }}
          IGNORE_FILES: ${{ inputs.trivy-ignore-files }}
        run: |
          import os

          gh_env_file = os.getenv("GITHUB_ENV")
          workdir = os.getenv("WORKING_DIRECTORY")
          ignorefiles = os.getenv("IGNORE_FILES")

          paths = []
          for p in [p.strip() for p in ignorefiles.split(",") if p]:
            paths.append(os.path.join(workdir, p))

          if paths:
            with open(gh_env_file, 'a') as f:
              print("TRIVYIGNORE_PATHS", ",".join(paths), sep="=", file=f)

      - name: Scan IaC code
        uses: aquasecurity/trivy-action@0.8.0
        id: trivy-scan
        with:
          exit-code: '0'
          format: json
          hide-progress: false
          ignore-unfixed: ${{ inputs.trivy-ignore-unfixed }}
          output: .trivy-scan-result.json
          scan-ref: ${{ inputs.working-directory }}
          scan-type: config
          severity: ${{ inputs.trivy-severity }}
          trivyignores: ${{ env.TRIVYIGNORE_PATHS }}

      - name: Parse scan results
        shell: python
        env:
          REPORT_FILENAME: .trivy-scan-result.json
        continue-on-error: ${{ inputs.trivy-error-is-success }}
        run: |
          import json
          import os
          import sys


          def format_item(*, filename, error):
              """
              Returns a string representing the error, formatted in such a way that
              GitHub will annotate the workflow run based on the severity of the error.
              """
              id = error.get("ID", "-1")
              title = error.get("Title", "<no title>")
              description = error.get("Description", "<no description>")
              message = error.get("Message", "")
              severity = error.get("Severity", "?")
              resolution = error.get("Resolution", "<no resolution>")
              start_line = error.get("CauseMetadata", {}).get("StartLine", "-1")
              end_line = error.get("CauseMetadata", {}).get("EndLine", "-1")

              message = f"{id}: {title}%0A{description}%0A{message}%0AResolution: {resolution}%0A"
              for reference in error.get("References", []):
                  message += f"%0A{reference}"

              gh_severity = "warning"
              if severity.upper() in ("HIGH", "CRITICAL"):
                  gh_severity = "error"

              return f"::{gh_severity} file={filename},line={start_line},endLine={end_line}::{message}"


          with open(os.environ["REPORT_FILENAME"], "r") as f:
              report = json.load(f)
          print("Raw report:", json.dumps(report, indent=2))

          exit_status = 0
          for res in report.get("Results", []):
              filename = res.get("Target", "<no filename>")
              for err in res.get("Misconfigurations", []):
                  print(format_item(filename=filename, error=err))

                  # Since severity filter is set at job level, we can exit non-zero for all
                  # errors regardless of severity and let workflow consumers decide which
                  # severity levels to care about.
                  exit_status = 1

          sys.exit(exit_status)

  trivy-sbom:
    name: Generate SBOM in ${{ inputs.working-directory }}
    runs-on: ${{ inputs.runs-on }}
    if: inputs.trivy-sbom-enabled
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Submit SBOM results to Dependency Snapshots
        uses: aquasecurity/trivy-action@0.8.0
        with:
          scan-type: 'fs'
          format: 'github'
          output: 'dependency-results.sbom.json'
          image-ref: '.'
          github-pat: '${{ secrets.GITHUB_TOKEN }}'

  terraform-docs:
    name: Render terraform docs in ${{ inputs.working-directory }}
    runs-on: ${{ inputs.runs-on }}
    if: inputs.terraform-docs-job-enabled && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main'
    needs: [terraform]
    concurrency: terraform-docs
    steps:
      - name: Check ssh key for checkout and push
        id: ssh_key_check
        shell: bash
        env:
          SSH_PRIVATE_KEY: "${{ secrets.ssh-private-key-docs-push }}"
        run: |
          set +e
          if test -n "${SSH_PRIVATE_KEY}"
          then
            echo "has_ssh_key=yes" >> $GITHUB_OUTPUT
          else
            echo "has_ssh_key=no" >> $GITHUB_OUTPUT
          fi
      - name: Checkout
        uses: actions/checkout@v3
        if: ${{ steps.ssh_key_check.outputs.has_ssh_key == 'yes' }}
        with:
          ref: "${{ github.head_ref }}"
          ssh-key: "${{ secrets.ssh-private-key-docs-push }}"
      - name: Checkout
        uses: actions/checkout@v3
        if: ${{ steps.ssh_key_check.outputs.has_ssh_key  != 'yes' }}
        with:
          ref: "${{ github.head_ref }}"
      - uses: actions/setup-python@v4
      - name: Get workflow ref
        id: workflow_tag
        shell: bash
        run: |
          # Skip auto-detection if input is specified
          if [[ -n "${{ inputs.workflow-ref }}" ]]
          then
            echo "workflow_tag=${{ inputs.workflow-ref }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          pip3 install yq
          workflow_file="${GITHUB_WORKFLOW}"
          if ! [ -f "${workflow_file}" ]
          then
            workflow_file="$(grep -l "^name: ${GITHUB_WORKFLOW}$" .github/workflows/*)"
          fi
          workflow_tag="$(~/.local/bin/yq -r ".jobs[].uses" < "${workflow_file}"| grep github-workflow-terraform-config | cut -d@ -f2 | head -1)"
          echo "workflow_tag=${workflow_tag}" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
      - name: Checkout workflow
        id: checkout_workflow
        uses: actions/checkout@v3
        with:
          repository: nrkno/github-workflow-terraform-config
          ref: ${{ steps.workflow_tag.outputs.workflow_tag }}
          path: .github-workflow-terraform-config
      - name: Set configuration
        id: set_config
        shell: bash
        env:
          CONFIG_FILE: ${{ inputs.terraform-docs-config-file }}
        run: |
          if [ -f "$CONFIG_FILE" ]
          then
            echo "Using callers configuration for commitlint"
          else
            echo "Using workflow configuration for commitlint"
            cp -- "${GITHUB_WORKSPACE}/.github-workflow-terraform-config/.terraform-docs.yaml" "$CONFIG_FILE"
          fi
      - name: Remove workflow checkout
        shell: bash
        run: |
          rm -rf -- .github-workflow-terraform-config
      - name: Render terraform docs and push
        uses: terraform-docs/gh-actions@v1.0.0
        with:
          working-dir: ${{ inputs.working-directory }}
          config-file: ${{ inputs.terraform-docs-config-file }}
          fail-on-diff: ${{ inputs.terraform-docs-fail-on-diff }}
          recursive: ${{ inputs.terraform-docs-recursive }}
          output-file: ${{ inputs.terraform-docs-output-file }}
          output-method: ${{ inputs.terraform-docs-output-method }}
          git-push: false
      - name: Commit doc updates
        if: ${{ steps.ssh_key_check.outputs.has_ssh_key == 'yes' && inputs.terraform-docs-git-push }}
        shell: bash
        env:
          COMMIT_MESSAGE: ${{ inputs.terraform-docs-git-commit-message }}
        run: |
          if git status --porcelain |grep -E 'A[[:space:]]+.terraform-docs.ya?ml'
          then
            git restore --stage .terraform-docs.*
          fi
          if [ $(git status --porcelain | grep -c -E '*.\.md$') -eq 0 ]
          then
            echo "No changes to .md files"
            exit 0
          fi
          # sometimes cleanup fails, workaround
          sudo chown -R -- $(id -u) .git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add $(git status --porcelain | awk '/.*\.md$/ { print $2 }')
          git commit -m "$COMMIT_MESSAGE"
          git push
