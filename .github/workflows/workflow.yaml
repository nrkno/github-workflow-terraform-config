on:
  workflow_call:
    inputs:
      terraform-version:
        type: string
        default: latest
      working-directory:
        type: string
        default: .
      ignore-files:
        type: string
        default: ""
      status-comment-enabled:
        type: boolean
        default: true
      status-comment-message:
        type: string
        default: ""
      runs-on:
        type: string
        default: self-hosted

      # Toggles used for setting environment variables in this workflow.
      # It is not possible to pass env vars directly to reusable workflows.
      enable-azurerm-3-beta-resources:
        type: boolean
        default: false
    secrets:
      registries:
        required: false
      token:
        required: true
      ssh-private-key:
        required: true

name: Terraform
jobs:
  terraform:
    name: Config Validation in ${{ inputs.working-directory }}
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Determine need for SSH agent
        id: ssh-agent-test
        shell: bash
        env:
          SSH_PRIVATE_KEY: ${{ secrets.ssh-private-key }}
        run: |
          set +e
          test -n "${SSH_PRIVATE_KEY}"
          echo "::set-output name=exit_code::${?}"

      # SSH agent used to checkout Terraform modules from other private repos
      # on Github. Read the note "Github Actions SSH" in our Lastpass vault
      # for more information.
      - uses: webfactory/ssh-agent@v0.5.4
        # Work-around for not being able to test if a secret has been set when
        # using `if` for conditional step execution.
        if: steps.ssh-agent-test.outputs.exit_code == '0'
        with:
          ssh-private-key: ${{ secrets.ssh-private-key }}

      - name: Set registry secrets
        shell: bash
        env:
          REGISTRIES: "${{ secrets.registries }}"
        run: |
          export IFS=';'
          for registry in $REGISTRIES
          do
            echo $registry
            IFS="=" read domain token <<<$registry
            tokenvar="TF_TOKEN_$(tr . _ <<<$domain | sed s/-/__/g)"
            echo "Setting ${tokenvar} for ${domain}"
            echo "${tokenvar}=${token}" >> "${GITHUB_ENV}"
          done

      - name: Set environment toggles
        run: |
          set +ex
          if [ '${{ inputs.enable-azurerm-3-beta-resources }}' = 'true' ]; then
            echo 'ARM_THREEPOINTZERO_BETA_RESOURCES=true' >> $GITHUB_ENV
          fi

      - name: Checkout
        uses: actions/checkout@v3

      # Delete ignored files inside repo before running Terraform.
      # This is useful e.g. if the repository has configured a Terraform
      # backend that should not be used when simply validating the
      # configuration.
      # Care is taken to prevent deletion of files outside of the repository
      # root.
      - name: Remove ignored files
        if: inputs.ignore-files != ''
        env:
          IGNORE_FILES: ${{ inputs.ignore-files }}
        shell: python
        working-directory: ${{ inputs.working-directory }}
        run: |
          import os
          import pathlib
          import shutil

          fpaths = os.getenv("IGNORE_FILES", "")
          for fpath in [s.strip() for s in fpaths.split(",")]:
            # Make sure we only delete files in repo root
            safe_dir = os.getcwd() + os.sep
            if not os.path.commonprefix((os.path.realpath(fpath),safe_dir)) == safe_dir:
              raise ValueError(f"Not allowed to delete path outside of repo root: {fpath}")

            # Delete path
            p = pathlib.Path(fpath)
            if p.is_file():
              p.unlink()
              print("deleted file:", p.name)
            elif p.is_dir():
              shutil.rmtree(p.name)
              print("deleted directory:", p.name)

      - name: Setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform-version }}
          terraform_wrapper: false

      - name: Check formatting (lint)
        id: fmt
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: |
          set +e
          terraform fmt -check -recursive -list=true
          echo "::set-output name=exit_code::${?}"
        continue-on-error: true

      - name: Initialise
        id: init
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: |
          set +e
          terraform init -no-color
          echo "::set-output name=exit_code::${?}"
        continue-on-error: true

      - name: Validate
        id: validate
        shell: bash
        working-directory: ${{ inputs.working-directory }}
        run: |
          set +e
          terraform validate -no-color
          echo "::set-output name=exit_code::${?}"
        continue-on-error: true

      - name: Post results as comment
        uses: actions/github-script@v6
        if: github.event.pull_request && github.actor != 'dependabot[bot]' && inputs.status-comment-enabled
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const bool_emoji = (v) => Boolean(v) ? '✔️' : '❌';
            const data = {
              url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              fmt: bool_emoji(${{ steps.fmt.outputs.exit_code == '0' }}),
              init: bool_emoji(${{ steps.init.outputs.exit_code == '0' }}),
              validate: bool_emoji(${{ steps.validate.outputs.exit_code == '0' }}),
              status: Boolean(${{ steps.fmt.outputs.exit_code == '0' && steps.init.outputs.exit_code == '0' && steps.validate.outputs.exit_code == '0' }})
            }
            const body = `format: ${data.fmt} | init: ${data.init} | validate: ${data.validate}\n[check](${data.url}) ${data.status ? 'succeeded' : 'failed'}:\n\n${{ inputs.status-comment-message }}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body,
            });

      - name: 'Job results'
        shell: python
        run: |
          import sys

          test_cases = dict(
            fmt="${{ steps.fmt.outputs.exit_code }}",
            init="${{ steps.init.outputs.exit_code }}",
            validate="${{ steps.validate.outputs.exit_code }}",
          )

          failed = False
          for name, exit_code in test_cases.items():
            success = exit_code == "0"
            print(name, success)
            if not success:
              failed = True

          if failed:
            sys.exit(1)
